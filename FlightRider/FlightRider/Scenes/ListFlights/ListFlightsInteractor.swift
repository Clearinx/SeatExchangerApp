//
//  ListFlightsInteractor.swift
//  FlightRider
//
//  Created by Tomi on 2019. 10. 31..
//  Copyright (c) 2019. Tomi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListFlightsBusinessLogic
{
    func requestLoadUserData(request: ListFlights.UserData.EmptyRequest)
    func requestUserFlightsFromDataStore(request: ListFlights.StoredUserFlights.Request)
    func fetchDataFromPreviousViewController(dataModel: Login.DataStore.ListViewDataModel)
    func fetchFlightsToDisplay(model: ListFlights.FligthsToDisplay.DataModel)
    func pushDatabaseObjectsToDataStore(response: ListFlights.UserData.Response)
}

protocol ListFlightsDataStore
{
    var dataStore: ListFlights.DataStore.DataStore { get set }
}

class ListFlightsInteractor: ListFlightsBusinessLogic, ListFlightsDataStore
{
    var presenter: ListFlightsPresentationLogic?
    var worker: ListFlightsWorker?
    var dataStore = ListFlights.DataStore.DataStore()
    var databaseWorker = DatabaseWorker()
    
    //MARK: - Request functions
    
    func requestLoadUserData(request: ListFlights.UserData.EmptyRequest) {
        let newRequest = ListFlights.UserData.Request(userUid: dataStore.uid, userEmail: dataStore.email)
        worker?.requestLoadUserData(request: newRequest)
    }
    
    func requestUserFlightsFromDataStore(request: ListFlights.StoredUserFlights.Request) {
        let response = ListFlights.StoredUserFlights.Response(flights: dataStore.user!.flights)
        worker?.fetchUserDataFromDataStore(response: response)
    }
    
    //MARK: - Fetch functions
    
    func fetchDataFromPreviousViewController(dataModel: Login.DataStore.ListViewDataModel) {
        dataStore.email = dataModel.email
        dataStore.uid = dataModel.uid
        dataStore.cloudUser = CloudUser()
        dataStore.flights = [ManagedFlight]()
    }
    
    func fetchFlightsToDisplay(model: ListFlights.FligthsToDisplay.DataModel) {
        let sortedModel = ListFlights.FligthsToDisplay.DataModel(flights: model.flights.sorted(by: { $1.departureDate > $0.departureDate }))
        dataStore.flights = sortedModel.flights
        presenter?.pushViewModelUpdate(model: model)
        let request = ListFlights.UIUpdate.Request()
        presenter?.requestUIUpdate(request: request)
    }
    
    //Push: - Fetch functions
    
    func pushDatabaseObjectsToDataStore(response: ListFlights.UserData.Response) {
        if let localUser = response.localUser{
            dataStore.user = localUser
        }
        if let cloudUser = response.cloudUser{
            dataStore.cloudUser = cloudUser
        }
    }
}
