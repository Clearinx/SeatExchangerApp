//
//  ListFlightsWorker.swift
//  FlightRider
//
//  Created by Tomi on 2019. 10. 31..
//  Copyright (c) 2019. Tomi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import CloudKit

protocol ListFlightsWorkerProtocol{
    func requestLoadUserData(request: ListFlights.UserData.Request)
    func fetchUserDataFromDataStore(response: ListFlights.StoredUserFlights.Response)
}

class ListFlightsWorker : ListFlightsWorkerProtocol, UserWorkerProtocol, FlightWorkerProtocol
{    
    weak var interactor : ListFlightsInteractor?
    weak var databaseWorker : DatabaseWorker!
    
    func requestLoadUserData(request: ListFlights.UserData.Request) {
        databaseWorker.syncLocalDBWithiCloud(providedObject: ManagedUser.self, sortKey: "uid", sortValue: [request.userUid], cloudTable: "AppUsers", saveParams: [request.userUid, request.userEmail], container: self.databaseWorker.container, delegate: (interactor?.presenter!.viewController!)!, saveToBothDbHandler: saveUserDataToBothDb, fetchFromCloudHandler: fetchUserFromCloud, compareChangeTagHandler: compareUserChangeTag, decideIfUpdateCloudOrDeleteHandler: decideIfUpdateCloudOrDeleteUser){
                let request = ListFlights.StoredUserFlights.Request()
                self.interactor?.requestUserFlightsFromDataStore(request: request)
        }
    }
    
    func fetchUserDataFromDataStore(response: ListFlights.StoredUserFlights.Response) {
        requestLoadUserFlightData(response: response)
    }
    
    func requestLoadUserFlightData(response: ListFlights.StoredUserFlights.Response){
        databaseWorker.syncLocalDBWithiCloud(providedObject: ManagedFlight.self, sortKey: "uid", sortValue: response.flights, cloudTable: "Flights", saveParams: nil, container: self.databaseWorker.container, delegate: (interactor?.presenter?.viewController!)!, saveToBothDbHandler: doNothing, fetchFromCloudHandler: fetchFlightsFromCloud, compareChangeTagHandler: compareFlightsChangeTag, decideIfUpdateCloudOrDeleteHandler: deleteFlightsFromLocalDb) {
                self.queryFlightsToShow(flights: response)
        }
    }
    
    func queryFlightsToShow(flights: ListFlights.StoredUserFlights.Response){
        let flightRequest = ManagedFlight.createFetchRequest() as! NSFetchRequest<NSManagedObject>
        let flightPred = NSPredicate(format: "ANY uid IN %@", flights.flights)
        let managedFlights = self.databaseWorker.makeLocalQuery(sortKey: "uid", predicate: flightPred, request: flightRequest, container: self.databaseWorker.container, delegate: (interactor?.presenter!.viewController!)!) as! [ManagedFlight]
        let model = ListFlights.FligthsToDisplay.DataModel(flights: managedFlights)
        interactor?.fetchFlightsToDisplay(model: model)
    }
}
