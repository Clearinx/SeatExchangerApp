//
//  LoginViewController.swift
//  FlightRider
//
//  Created by Tomi on 2019. 10. 29..
//  Copyright (c) 2019. Tomi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
  func displaySomething(viewModel: Login.LoginFields.ViewModel)
    //func setRememberMeOn()
    //func setRememberMeOff()
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    
  
    @IBOutlet weak var rememberMeSwitch: UISwitch!
    @IBOutlet weak var PasswordField: UITextField!
    @IBOutlet weak var EmailFiled: UITextField!
    var spinnerView : UIView!
    var ai : UIActivityIndicatorView!
    let backgroundImageView = UIImageView()
    

  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    setGestureRecognizer()
    setSpinnerView()
    setRememberMeSwitch()
    setBackground()
  }
    
    func setGestureRecognizer(){
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(UIInputViewController.dismissKeyboard))
        view.addGestureRecognizer(tap)
    }
    
    func setSpinnerView(){
        spinnerView = UIView.init(frame: self.view.bounds)
        ai = UIActivityIndicatorView.init(style: .whiteLarge)
    }
    
    func setRememberMeSwitch(){
        rememberMeSwitch.addTarget(self, action: #selector(self.stateChanged), for: .valueChanged)
        let loginData = interactor!.fetchStoredLoginData()
        EmailFiled.text = loginData.email
        PasswordField.text = loginData.password
        //interactor+presenter
        if(loginData.switchedOn){
            rememberMeSwitch.setOn(true, animated: false)
        }
        else{
            rememberMeSwitch.setOn(false, animated: false)
        }
    }
    
    /*func setRememberMeOn(){
        rememberMeSwitch.setOn(true, animated: false)
    }
    
    func setRememberMeOff(){
        rememberMeSwitch.setOn(false, animated: false)
    }*/
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  /*func doSomething()
  {
    let request = Login.LoginFields.Request()
    interactor?.doSomething(request: request)
  }*/
  
  func displaySomething(viewModel: Login.LoginFields.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    @objc func stateChanged(_ switchState: UISwitch) {
        interactor!.fetchRememberMeSwitchChanged(email: EmailFiled.text, password: PasswordField.text, isOn: rememberMeSwitch.isOn)
    }
    
    //view
    func LoginError(){
        self.removeSpinner(spinnerView: self.spinnerView, ai: self.ai)
        let ac = UIAlertController(title: "Error", message: "Could not log in or sign up", preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "Ok", style: .cancel)
        ac.addAction(cancelAction)
        present(ac, animated: true)
    }
    
    @objc func dismissKeyboard() {
        view.endEditing(true)
    }
    
    func setBackground() {
        view.addSubview(backgroundImageView)
        backgroundImageView.translatesAutoresizingMaskIntoConstraints = false
        backgroundImageView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        backgroundImageView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        backgroundImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        backgroundImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        backgroundImageView.contentMode = .scaleAspectFill
        
        backgroundImageView.image = UIImage(named: "flight1")
        view.sendSubviewToBack(backgroundImageView)
        
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.navigationController?.navigationBar.isTranslucent = true
        self.navigationController?.view.backgroundColor = .clear
    }
}
