//
//  LoginInteractor.swift
//  FlightRider
//
//  Created by Tomi on 2019. 10. 29..
//  Copyright (c) 2019. Tomi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic: class {
    func requestLoginData(request: Login.LoginFields.Request)
    func requestLoginDataUpdate(request: Login.LoginProcess.Request)
    func requestLoginAuthentication(request: Login.LoginProcess.Request)
    func requestSignupAuthentication(request: Login.SignupProcess.Request)
    func fetchLoginData(response: Login.LoginFields.Response)
    func fetchLoginProcessResults(response: Login.LoginProcess.Response)
    func fetchSignupAuthenticationResults(response: Login.SignupProcess.Response)
    func pushRememberMeSwitchChanged(request: Login.SwitchData.Request)
}

protocol LoginDataStore {
  //var name: String { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {

  var presenter: LoginPresentationLogic?
  var worker: LoginWorkerProtocol?
  var databaseWorker = DatabaseWorker()

    init() {
        worker = LoginWorker()
        worker?.interactor = self
    }

    // MARK: - Request functions

    func requestLoginData(request: Login.LoginFields.Request) {
        worker?.requestLoginData(request: request)
    }

    func requestLoginDataUpdate(request: Login.LoginProcess.Request) {
        if(request.email != nil && request.password != nil) {
            if request.switchedOn {
                worker?.pushLoginDataUpdate(request: request)
            }
        }
    }

    func requestLoginAuthentication(request: Login.LoginProcess.Request) {
        worker?.requestLoginAuthentication(request: request)
    }

    func requestSignupAuthentication(request: Login.SignupProcess.Request) {
        if request.email != nil && request.password != nil {
            worker?.requestSignupAuthentication(request: request)
        } else {
            presenter?.setLoginError()
        }
    }

    // MARK: - Fetch functions

    func fetchLoginData(response: Login.LoginFields.Response) {
        presenter?.fetchLoginData(response: response)
    }

    func fetchLoginProcessResults(response: Login.LoginProcess.Response) {
        if(response.success) {
            let newResponse = Login.LoginProcess.Response(email: response.email, uid: response.uid, databaseWorker: self.databaseWorker, success: true)
            presenter?.fetchLoginProcessResults(response: newResponse)
        } else {
            presenter?.fetchLoginProcessResults(response: response)
        }
    }

    func fetchSignupAuthenticationResults(response: Login.SignupProcess.Response) {
        if(response.success) {
            let newResponse = Login.SignupProcess.Response(email: response.email, uid: response.uid, databaseWorker: self.databaseWorker, success: true)
            presenter?.fetchSignupAuthenticationResults(response: newResponse)
        } else {
            presenter?.fetchSignupAuthenticationResults(response: response)
        }
    }

    // MARK: - Push functions

    func pushRememberMeSwitchChanged(request: Login.SwitchData.Request) {
        if request.switchedOn {
            if request.email != nil && request.password != nil {
                worker?.pushSwitchOnRememberMe(request: request)
            }
        } else {
            worker?.pushSwitchOffRememberMe()
        }
    }

    // MARK: - Set Messages

}
