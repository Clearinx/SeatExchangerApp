//
//  SelectSeatsInteractor.swift
//  FlightRider
//
//  Created by Tomi on 2019. 10. 31..
//  Copyright (c) 2019. Tomi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SelectSeatsBusinessLogic: class {
    func requestCheckSeatsData(request: SelectSeats.StoredData.Request)
    func requestDisplayData(request: SelectSeats.DisplayData.Request)
    func requestUpdateSeat(request: SelectSeats.UpdateSeat.Request)
    func requestPickerInitialization(request: SelectSeats.PickerDataSource.Request)
    func fetchPickerDataSource(response: SelectSeats.PickerDataSource.Response)
    func fetchUpdateSeatResult(response: SelectSeats.UpdateSeat.Response)
    func pushDataFromPreviousViewController(viewModel: ListFlights.SelectSeatsData.ViewModel)
    func pushJustSelectedSeatState(request: SelectSeats.StoredData.Request)
}

protocol SelectSeatsDataStore {
    var dataStore: SelectSeats.StoredData.ViewModel { get set }
}

class SelectSeatsInteractor: SelectSeatsBusinessLogic, SelectSeatsDataStore {
    var dataStore = SelectSeats.StoredData.ViewModel()
    var databaseWorker: DatabaseWorkerProtocol!

    var presenter: SelectSeatsPresentationLogic?
    var worker: SelectSeatsWorkerProtocol?

    // MARK: - Request functions

    func requestCheckSeatsData(request: SelectSeats.StoredData.Request) {
        let checkSeatsDataModel = SelectSeats.StoredData.CheckSeatsModel(flight: dataStore.flight, user: dataStore.user, justSelectedSeat: dataStore.justSelectedSeat)
        presenter?.fetchCheckSeatsData(dataModel: checkSeatsDataModel)
    }

    func requestDisplayData(request: SelectSeats.DisplayData.Request) {
        let response = SelectSeats.DisplayData.Response(image: dataStore.image, flightNumber: dataStore.flight?.iataNumber)
        presenter?.fetchDisplayData(response: response)
    }

    func requestUpdateSeat(request: SelectSeats.UpdateSeat.Request) {
        let requestWithEmail = SelectSeats.UpdateSeat.Request(selectedSeatNumber: request.selectedSeatNumber, email: dataStore.user?.email, flight: dataStore.flight)
        let worker = SelectSeatsWorker()
        worker.interactor = self
        worker.databaseWorker = self.databaseWorker
        worker.requestUpdateSeat(request: requestWithEmail)

    }

    func requestPickerInitialization(request: SelectSeats.PickerDataSource.Request) {
        let worker = SelectSeatsWorker()
        worker.interactor = self
        worker.requestPickerInitialization(request: request)
        presenter?.requestPickerInitialization(request: request)
    }

    // MARK: - Fetch functions
    func fetchPickerDataSource(response: SelectSeats.PickerDataSource.Response) {
        let typeOptional = response.dataSource.filter {$0["modelName"].stringValue == dataStore.flight?.airplaneType}.first
        if let type = typeOptional {
            let actualType = AirplaneModel(modelName: type["modelName"].stringValue, numberOfSeats: type["numberOfSeats"].intValue, latestColumn: type["columns"].stringValue)
            let modelResponse = SelectSeats.PickerDataModel.Response(airplaneModel: actualType)
            presenter?.fetchPickerDataModel(response: modelResponse)
        } else {
            print("Model not found")
        }
    }

    func fetchUpdateSeatResult(response: SelectSeats.UpdateSeat.Response) {
        presenter?.fetchUpdateSeatResult(response: response)
    }

    // MARK: - Push functions

    func pushDataFromPreviousViewController(viewModel: ListFlights.SelectSeatsData.ViewModel) {
        self.dataStore.flight = viewModel.flight
        self.dataStore.user = viewModel.user
        self.dataStore.userRecord = viewModel.userRecord
        self.dataStore.image = viewModel.image
        self.databaseWorker = viewModel.databaseWorker
    }

    func pushJustSelectedSeatState(request: SelectSeats.StoredData.Request) {
        dataStore.justSelectedSeat = true
    }

}
